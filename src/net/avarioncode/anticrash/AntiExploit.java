package net.avarioncode.anticrash;

import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.MessageToMessageDecoder;
import net.avarioncode.anticrash.manager.PlayerManager;
import net.minecraft.server.v1_8_R3.*;
import org.bukkit.GameMode;
import org.bukkit.Material;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftPlayer;
import org.bukkit.entity.Player;

import java.util.List;

public class AntiExploit {
    private final Player player;
    private Channel channel;
    private final String injectorName;

    public AntiExploit(Player player, String injectorName) {
        this.injectorName = injectorName;
        this.player = player;
    }

    public void inject() {
        CraftPlayer player = (CraftPlayer) this.player;
        this.channel = player.getHandle().playerConnection.networkManager.channel;
        this.channel.pipeline().addAfter("decoder", "inject_dec_" + this.injectorName, new MessageToMessageDecoder() {
            protected void decode(ChannelHandlerContext ctx, Object packet, List out) {
                Packet<?> p = (Packet<PacketListener>) packet;
                if (!AntiExploit.this.readPackets(AntiExploit.this.player, ctx.channel(), p)) {
                    out.add(packet);
                }

            }
        });
    }

    public void uninject() {
        if (this.channel.pipeline().get("inject_dec_" + this.injectorName) != null) {
            this.channel.pipeline().remove("inject_dec_" + this.injectorName);
        }

    }

    public boolean readPackets(Player sender, Channel channel, Packet<?> packet) {
        try {
            if (packet instanceof PacketPlayInBlockPlace) {
                PacketPlayInBlockPlace pa = (PacketPlayInBlockPlace) packet;
                if (pa.getItemStack() != null && (pa.getItemStack().getItem() == Items.WRITTEN_BOOK || pa.getItemStack().getItem() == Items.WRITABLE_BOOK || pa.getItemStack().getItem() == Items.FIREWORKS)) {
                    PlayerManager.DisconnectPacket(sender, "&8[&dBlockPlace&8] &5Too many packets!");
                    channel.close();
                    return true;
                }
            }
            if (packet instanceof PacketPlayInFlying) {
                PacketPlayInFlying packetPlayInFlying = (PacketPlayInFlying) packet;
                if (packetPlayInFlying.b() > sender.getLocation().getY() + 8.0D) {
                    PlayerManager.DisconnectPacket(sender, "&8[&dFlyCrasher&8] &5Too many packets!");
                    channel.close();
                    return true;
                }
            }
            if (packet instanceof PacketPlayInSetCreativeSlot) {
                PacketPlayInSetCreativeSlot pa = (PacketPlayInSetCreativeSlot) packet;
                if (sender.getGameMode() != GameMode.CREATIVE) {
                    PlayerManager.DisconnectPacket(sender, "&8[&dCreativeSlot&8] &5Too many packets!");
                    channel.close();
                    return true;
                }

                if (pa.getItemStack() != null && (pa.getItemStack().getItem() == Items.WRITTEN_BOOK || pa.getItemStack().getItem() == Items.WRITABLE_BOOK || pa.getItemStack().getItem() == Items.FIREWORKS)) {
                    PlayerManager.DisconnectPacket(sender, "&8[&dCreativeSlot&8] &5Too many packets!");
                    channel.close();
                    return true;
                }
            }

            if (packet instanceof PacketPlayInWindowClick) {
                PacketPlayInWindowClick pa = (PacketPlayInWindowClick) packet;
                if (pa.e() != null && (pa.e().getItem() == Items.WRITTEN_BOOK || pa.e().getItem() == Items.WRITABLE_BOOK || pa.e().getItem() == Items.FIREWORKS)) {
                    PlayerManager.DisconnectPacket(sender, "&8[&dWindowClick&8] &5Too many packets!");
                    channel.close();
                    return true;
                }
            }

            if (packet instanceof PacketPlayInCustomPayload) {
                PacketPlayInCustomPayload pa = (PacketPlayInCustomPayload) packet;
                if (pa.b().writerIndex() > 32767) {
                    return true;
                }

                if (pa.a().equals("MC|BEdit")) {
                    if (sender.getInventory().getItemInHand().getType() != Material.BOOK_AND_QUILL && sender.getInventory().getItemInHand().getType() != Material.WRITTEN_BOOK) {
                        PlayerManager.DisconnectPacket(sender, "&8[&dPayLoad&8] &5Too many packets!");
                        channel.close();
                        return true;
                    }
                }

                if (pa.a().equals("MC|BSign")) {
                    if (sender.getInventory().getItemInHand().getType() != Material.BOOK_AND_QUILL && sender.getInventory().getItemInHand().getType() != Material.WRITTEN_BOOK) {
                        PlayerManager.DisconnectPacket(sender, "&8[&dPayLoad&8] &5Too many packets!");
                        channel.close();
                        return true;
                    }
                }

                if (pa.a().equals("MC|AdvCdm")) {
                    PlayerManager.DisconnectPacket(sender, "&8[&dPayLoad&8] &5Too many packets!");
                    channel.close();
                    return true;
                }

                if (pa.a().equals("REGISTER") || pa.a().equals("UNREGISTER") || pa.a().equals("MC|BEdit") || pa.a().equals("MC|BSign")) {
                    PlayerManager.DisconnectPacket(sender, "&8[&dPayLoadk8] &5Too many packets!");
                    channel.close();
                    return true;
                }
                if (pa.a().equals("MC|ItemName")) {
                    String ItemName = new String(pa.b().array());
                    if (ItemName.length() > 41) {
                        PlayerManager.DisconnectPacket(sender, "&8[&dPayLoad&8] &5Too many packets!");
                        channel.close();
                        return true;
                    }
                }
            }

            return false;
        } catch (Exception var6) {
            return true;
        }
    }
}
